// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/1/Mux8Way16.hdl
/**
 * 8-way 16-bit multiplexor:
 * out = a if sel = 000
 *       b if sel = 001
 *       c if sel = 010
 *       d if sel = 011
 *       e if sel = 100
 *       f if sel = 101
 *       g if sel = 110
 *       h if sel = 111
 */
CHIP Mux8Way16 {
    IN a[16], b[16], c[16], d[16],
       e[16], f[16], g[16], h[16],
       sel[3];
    OUT out[16];

    PARTS:
    And(a = sel[2], b = sel[2], out = sel3);

    And(a = sel[0], b = sel[1], out = andSel);
    Or(a = sel[0], b = sel[1], out  = orSel);
    And(a = andSel, b = orSel, out = orSelAndAndSel);
    Xor(a = sel[0], b = sel[1], out = xorSel);
    And(a = xorSel, b = sel[0], out = xorAndSel0);
    And(a = xorSel, b = sel[1], out = xorAndSel1);
    Mux(a = xorAndSel1, b = xorAndSel0, sel = xorAndSel0, out= final);
    Mux16(a = a, b = d, sel = orSelAndAndSel, out = aOrd);
    Mux16(a = c, b = b, sel = xorAndSel0, out = bOrc);
    Mux16(a = aOrd, b = bOrc, sel = final, out = aOrdOrbOrc );
    And(a = sel[0], b = sel[1], out = andSel2);
    Or(a = sel[0], b = sel[1], out  = orSel2);
    And(a = andSel2, b = orSel2, out = orSelAndAndSel2);
    Xor(a = sel[0], b = sel[1], out = xorSel2);
    And(a = xorSel2, b = sel[0], out = xorAndSel02);
    And(a = xorSel2, b = sel[1], out = xorAndSel12);
    Mux(a = xorAndSel12, b = xorAndSel02, sel = xorAndSel02, out= final2);
    Mux16(a = e, b = h, sel = orSelAndAndSel2, out = eOrh);
    Mux16(a = g, b = f, sel = xorAndSel02, out = fOrg);
    Mux16(a = eOrh, b = fOrg, sel = final2, out = eOrfOrgOrh );
    Mux16(a = aOrdOrbOrc, b = eOrfOrgOrh, sel = sel3, out = out );


}